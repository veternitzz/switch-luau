"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[331],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),h=r,d=p["".concat(s,".").concat(h)]||p[h]||m[h]||l;return n?a.createElement(d,i(i({ref:t},c),{},{components:n})):a.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},76647:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const l={},i="Switch.luau",o={type:"mdx",permalink:"/switch-luau/",source:"@site/pages/index.md",title:"Switch.luau",description:"Switch.luau is a switch implementation in pure luau.",frontMatter:{}},s=[{value:"Why use a switch statement over an if-statement?",id:"why-use-a-switch-statement-over-an-if-statement",level:2},{value:"With switch statements:",id:"with-switch-statements",level:3},{value:"Without switch statements",id:"without-switch-statements",level:3},{value:"Conclusion",id:"conclusion",level:3},{value:"Installation",id:"installation",level:2},{value:"Via Github Releases",id:"via-github-releases",level:3},{value:"Via Wally",id:"via-wally",level:3},{value:"Methods (switch.new)",id:"methods-switchnew",level:4}],u={toc:s},c="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"switchluau"},"Switch.luau"),(0,r.kt)("p",null,"Switch.luau is a switch implementation in pure luau."),(0,r.kt)("h2",{id:"why-use-a-switch-statement-over-an-if-statement"},"Why use a switch statement over an if-statement?"),(0,r.kt)("p",null,"Switch statements, popular in many programming languages, offer a cleaner and more readable solution to deeply nested if-else statements. Switch statements also handle fall-through cases and defaults, reducing the chances of logic errors. "),(0,r.kt)("h3",{id:"with-switch-statements"},"With switch statements:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-luau"},'local Switch = require(...) -- Change ... to the path of the ModuleScript\n\nlocal numberVariable = 10 -- this here is the variable we will be checking\n\nSwitch.new(numberVariable)\n    :Case(468, "==", function()\n        print("numberVariable is equal to 468")\n    end)\n    :Case(20, ">", function()\n        print("numberVariable is greater than 20")\n    end)\n    :Default(function()\n        print("numberVariable doesn\'t match the cases")\n    end)\n')),(0,r.kt)("p",null,"Output: ",(0,r.kt)("inlineCode",{parentName:"p"},"numberVariable doesn't match the cases")),(0,r.kt)("h3",{id:"without-switch-statements"},"Without switch statements"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-luau"},'local numberVariable = 10 -- this is the variable we will be checking\n\nif numberVariable == 468 then\n    print("numberVariable is equal to 468")\nelseif numberVariable == 11 then\n    print("numberVariable is greater than 20")\nelse\n    print("numberVariable doesn\'t match the cases")\nend\n')),(0,r.kt)("p",null,"Output: ",(0,r.kt)("inlineCode",{parentName:"p"},"numberVariable doesn't match the cases")),(0,r.kt)("h3",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"Ultimately, switch statements are more readable. Especially if you have a lot of nested if-statements in your code. Switch statements allow us to space out our cases as much as we want. They also make it easier to remove a condition."),(0,r.kt)("p",null,"Switch statements are also more diverse. You can switch it up and define your default function before your cases; or, you can define a default in between two cases."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("h3",{id:"via-github-releases"},"Via Github Releases"),(0,r.kt)("p",null,"You can install the switch module via github releases by downloading the .rbxl file under the latest release."),(0,r.kt)("h3",{id:"via-wally"},"Via Wally"),(0,r.kt)("p",null,"You can also use wally to install the switch module by inserting: ",(0,r.kt)("inlineCode",{parentName:"p"},'switch = "veternitzz/switch@2.1.1"')," into your wally config file."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Note:")," No wally releases before 1.0.4 are stable, as I had a little bit of an issue publishing this module."),(0,r.kt)("h2",{parentName:"blockquote",id:"api-reference"},"Api Reference"),(0,r.kt)("h3",{parentName:"blockquote",id:"constructors"},"Constructors"),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("strong",{parentName:"strong"},"Switch.new()")),": metatable")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters"),"\n| Parameter Name  | Type  | Description           |\n| --------------- | ----- | --------------------- |\n| variable        | any   | The variable to check |"),(0,r.kt)("h4",{id:"methods-switchnew"},"Methods (switch.new)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("strong",{parentName:"strong"},"Switch:debug()")),": nil"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description"),"\nEnables or disabled debug logging. This function was only designed for debugging and will print when a case or default is registered."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters"),"\n| Parameter Name | Type    | Description                                |\n| -------------- | ------- | ------------------------------------------ |\n| enabled        | boolean | Whether to enable or disable debug logging |"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("strong",{parentName:"strong"},"Switch:Case()")),": Switch"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description"),"\nRegisters a case if the ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," is met and calls the parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"func"),". There is no limit to how many cases you can have."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters"),'\n| Parameter Name | Type                      | Description                              |\n| -------------- | ------------------------- | ---------------------------------------  |\n| value          | any                       | The value to compare the variable to     |\n| operation      | "~=", "==", ">", ">=", "<", "<=" | The operation to perform                 |\n| func           | any (must be a function)  | The function to call if the value is met |'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Usage Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-luau"},'local a = 47\n\nlocal conditional = switch.new(a)\n\n-- Because the operation is ~= (not equal to), the output will be "Hello world"\nconditional:Case(46, "~=", function()\n    print("Hello world")\nend)\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("strong",{parentName:"strong"},"Switch:Default()")),": nil"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description"),"\nThe default case. This acts as an else statement and will call the ",(0,r.kt)("inlineCode",{parentName:"p"},"func")," parameter if no cases are met. There may be only one registered default case per constructor."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters"),"\n| Parameter Name | Type                     | Description                               |\n| -------------- | ------------------------ | ----------------------------------------- |\n| func           | any (must be a function) | The function to call if the value is met  |"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Usage Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-luau"},'local a = 57\n\n-- The output will be: "Default"\n\nSwitch.new(a)\n    :Case(56, "==", function()\n        print("56")\n    end)\n    :Default(function()\n        print("Default")\n    end)\n')))}p.isMDXComponent=!0}}]);